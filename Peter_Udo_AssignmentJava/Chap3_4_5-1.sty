Chapter 3.6 (Default Constructors) What is a default constructor? 
How are an objectâ€™s instance variables initialized if
a class has only a default constructor?

A default constructor is a constructor that
is automatically generated by the Java compiler 
if a class does not explicitly define any constructors.
It is a special type of constructor that takes no arguments.
Its main purpose is to initialize the instance 
variables of an object to default values.
==============================================



Chapter 3.7 Explain 
the purpose of an instance variable?

/*An instance variable, also known as
 an instance field or member variable, 
 is a variable declared within a class but 
 outside of any method, constructor, or block. 
 Each object int of the class 
 has its own copy of the instance variables,
 which means that the values stored in these
 variables are unique to each object.
 Generally, instance variables play a fundamental
 role in defining the structure and behavior of 
  objects in object-oriented programming, allowing objects to 
 encapsulate and maintain their state effectively.
 */
 ================================================
 What does the following code print? 
 //System.out.printf("*%n**%n***%n****%n*****%n");?

 Each line contains an increasing number of asterisks, 
 from 1 to 5, and each asterisk is followed by a 
 newline character (%n), causing each subsequent 
 line to start on a new line.
  *
 **
 ***
 ****
 *****
 ===================================================
 Chapter 4.11  Explain what happens when a Java program attempts to divide one integer by another. What happens to the fractional part of the calculation? How can you avoid that outcome?


 In integer division, the fractional part of the calculation is discarded, and only the integer part of the quotient is retained.
 If you divide 7 by 3 using integer division (7 / 3), the result will be 2 because the fractional part (0.333) is truncated, and only the integer part (2) is retained.

To avoid this outcome and perform division with a fractional part, you can use Floating Point-Numbers, Big Decimal and Cast to floating-Point.
=========================================================
Chapter 4.12 Describe the two ways in which control statements can be combined?

Control statements in programming languages like Java can be combined in two main ways: 
NESTING involves placing one control statement inside another control statement. This allows for more complex control flow logic by executing one control statement within the scope of another

CHAINING involves linking multiple control statements together to form a sequence of actions. This is commonly seen with if-else-if chains or with switch statements
==========================================================
Chapter 4.13 What type of iteration would be appropriate for calculating the sum of the first 100 positive integers? What type would be appropriate for calculating the sum of an arbitrary number of positive integers? Briefly describe how each of these tasks could be performed?


For calculating the sum of the first 100 positive integers, a for loop would be appropriate. A for loop allows for precise control over the number of iterations, making it well-suited for tasks where the number of iterations is known in advance.

For calculating the sum of an arbitrary number of positive integers, a while loop would be more appropriate. A while loop allows for iteration until a specific condition is met, making it suitable for situations where the number of iterations is not known in advance.

===========================================================
 Chapter 4.14 The difference between preincrementing and postincrementing a variable lies in when the increment operation is applied relative to the current value of the variable?

The main difference is the order in which the increment operation is applied: preincrementing increments the variable before its value is used, while postincrementing increments the variable after its value is used. This subtle distinction can affect the behavior of expressions and assignments in your code.
======================================================
Chapter 5.5
Describe the four basic elements of counter-controlled iteration?

Initialization: This element involves initializing the 
loop control variable before the loop begins. 
The loop control variable is typically an integer 
variable used to count the number of iterations. 
Initialization sets the initial value of the loop 
control variable to establish the starting point of the iteration.


Condition: The condition determines whether the loop 
should continue executing or terminate. It is evaluated 
before each iteration of the loop. If the condition 
evaluates to true, the loop continues to execute; 
if it evaluates to false, the loop terminates. 
The condition typically involves comparing the loop 
control variable with a target value.

Increment or Decrement: This element involves 
modifying the loop control variable within 
the loop body to progress towards the termination condition.
Incrementing increases the value of the loop 
control variable by a specific amount, 
while decrementing decreases it. Incrementing or decrementing
ensures that the loop eventually terminates by satisfying 
the condition.

Loop Body: The loop body contains the statements that
 are executed during each iteration of the loop. 
 It is the block of code enclosed within the loop construct  
 The loop body typically performs the desired operations 
 or computations for each iteration of the loop.
 ==========================================================
 Chapter 5.6 Compare and contrast the while and for 
 iteration statements?

 Both while and for loops are used for iteration, 
 but they have different syntax and intended use cases. 
 The choice between them depends on the specific 
 requirements of the loop and the preference of the programmer.
 Example:
 *Initialization:
 while loop: Initialization of loop control variable 
 is done outside the loop.
 for loop: Initialization of loop control variable is 
 done within the loop header itself.
 *Condition:
 while loop: The loop continues executing as long as the 
 condition evaluates to true. The condition is evaluated 
 before each iteration.
 for loop: The loop continues executing as long as the 
 condition evaluates to true. The condition is evaluated
 before each iteration.
 *Update:
 while loop: The loop control variable is updated within 
 the loop body.
 for loop: The loop control variable is updated as 
 part of the loop header.
 =====================================================
 Chapter 5.8 
 Compare and contrast the break and continue statements?

break: The break statement is used to terminate the innermost 
loop or switch statement in which it appears. 
When break is encountered, the control immediately 
exits the loop or switch statement, and the program continues
executing the code that follows the loop or switch.
continue: The continue statement is used to skip the remaining 
code in the current iteration of a loop and proceed 
to the next iteration. When continue is encountered, 
the control jumps to the next iteration of the loop without 
executing any further statements in the current iteration.
Example:
/* for (int i = 1; i <= 10; i++) {
    if (i == 5) {
        break; // Terminates the loop when i equals 5
    }
    System.out.println(i);
}
*/